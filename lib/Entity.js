var util = require('util')
var crypto = require('crypto')
var EventEmitter = require('events').EventEmitter

// TODO: auto set icon based on pass/fail (check/times) if not defined?

// Represents the state of an entity. Can be serialised, so that client can
// render and reference by a UID. Patches can be emitted to keep server/client
// states/views in sync.
var State = function(initial) {
	if (!(this instanceof State)) return new State()
	EventEmitter.call(this)

	if (!arguments[0])
		initial = {}

	console.assert(initial.class,    'entity state: class must be defined')
	console.assert(initial.name,     'entity state: name must be defined')
	console.assert(initial.category, 'entity state: category must be defined')

	// Reference object in method context
	var self = this

	// static stuff
	for (var i in initial) {
		self[i] = initial[i]
	}

	// DOM ID safe
	// TODO: evaluate using category-name
	var generate_id = function() {
		var hash = crypto.createHash('sha1')
		hash.update(initial.name+initial.category)
		return hash.digest('hex')
	}

	this.id = generate_id()

	// null/false/true, via test
	// undefined is better, as null serialises to false
	//this.healthy = null

	// don't use this, access attributes directly
	//this.get = function(key) { }

	this.set = function(key,val) {
		if (self[key] == val) return
		self[key] = val
		self.emit('set',key,val)
	}

	this.append = function(key,val) {
		if (!val) return
		self[key].append(val)
		self.emit('append',self.id,key,val)
	}

	this.fail = function() {
		// patch a remote state
		self.set('healthy',false)
	}

	this.pass = function() {
		// patch a remote state
		self.set('healthy',true)
	}

	// I don't want these attributes (from eventemitter) when serialising.
	// I hope this won't break anything. It does not appear to.
	delete this._maxListeners
	delete this.domain
	//delete this._events (does not work)
}

// Inheritance
util.inherits(State, EventEmitter)

// base class for an entity (may be generated by an enumerator)
// defines interface to tests, attributes etc
var Entity = function(config) {
	if (!(this instanceof Entity)) return new Entity()

	// parent constructor
	State.call(this,config)

	// instance of a test module, for example, HTTP status, ping, mail, DNS
	var tester = null

}

// Inheritance
util.inherits(Entity, State)
// Exposure
module.exports = Entity

// test
//var foo = new Entity({class:'bar',name:'john',category:'beans'})
//
//
// SEPARATE ENTITY AND STATE TBC
